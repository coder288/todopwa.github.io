{"version":3,"sources":["serviceWorker.js","components/Header/Header.jsx","components/TodoList/TodoList.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Header","className","TodoList","useState","localStorage","getItem","JSON","parse","todos","setTodos","todoAddInput","useRef","removeTodo","event","confirm","removeTodoId","parseInt","target","parentElement","dataset","id","todoArrayTmp","filter","elem","editTodo","editTodoId","forEach","push","text","value","useEffect","setItem","stringify","map","key","data-id","onClick","onChange","current","newTodoIndex","length","inputRef","render","document","querySelector","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d772aa7d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './header.css';\n\nconst Header = () => {\n  return(\n    <div className='header'>\n      <div className=\"header__title\">Список задач</div>\n    </div>\n  );\n};\n\nexport default Header;","import React, {useState, useEffect, useRef} from 'react';\nimport './todoList.css';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nconst TodoList = () => {\n\n  // Состояние todo\n  const [todos, setTodos] = useState( (localStorage.getItem('todos') ? JSON.parse(localStorage.getItem('todos')) : [] ));\n\n  // Ссылка на инпут добавления todo\n  let todoAddInput = useRef(null);\n\n  // Функция добавления todo\n  let addTodo = () => {\n\n    // Не сохраняем задачу с пустым инпутом\n    if (todoAddInput.current.value === '') return;\n\n    // Находим индекс для нового todo\n    let newTodoIndex = todos.length + 1;\n\n    setTodos([\n      ...todos,\n      {\n        id: newTodoIndex,\n        text: todoAddInput.current.value\n      }\n    ]);\n\n    todoAddInput.current.value = '';\n  };\n\n  // Функция удаления todo\n  let removeTodo = event => {\n    if (!window.confirm('Действительно удалить задачу?')) return;\n    // Id удаляемого todo\n    let removeTodoId = parseInt(event.target.parentElement.dataset.id);\n\n    // Перебираем массив с Todo и удаляем нужную задачу\n    // Временный массив с задачами\n    let todoArrayTmp = todos.filter(elem => elem.id !== removeTodoId);\n\n    setTodos(todoArrayTmp);\n  };\n\n  // Функция редактирования todo\n  let editTodo = event => {\n    // Id редактируемого todo\n    let editTodoId = parseInt(event.target.parentElement.dataset.id);\n\n    // Массив для временного хранения изменённой задачи\n    let todoArrayTmp = [];\n\n    // Перебираю массив с задачами и записываю его во временный массив\n    todos.forEach(elem => {\n      if (elem.id === editTodoId) todoArrayTmp.push({ id: editTodoId, text: event.target.value });\n      else todoArrayTmp.push(elem);\n    });\n\n    setTodos(todoArrayTmp);\n  };\n\n  // При смене изменении списка задач записываем todos в localStorage\n  useEffect( () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  return(\n    <div className='todo__items'>\n      {\n        todos.map(elem => {\n          return(\n            <div className=\"todo__item\" key={elem.id} data-id={elem.id}>\n              <i className=\"todo__remove\" onClick={removeTodo} />\n              <TextareaAutosize className='todo__textarea' value={elem.text} onChange={editTodo} />\n            </div>\n          )\n        })\n      }\n      <div className=\"todo__item\">\n        <i className=\"todo__add\" onClick={addTodo} />\n        <TextareaAutosize className='todo__textarea' inputRef={todoAddInput} />\n      </div>\n    </div>\n  );\n};\n\nexport default TodoList;","import React from 'react';\nimport {render} from 'react-dom';\nimport './reset.css';\nimport './style.css';\nimport * as serviceWorker from './serviceWorker.js';\n\nimport Header from './components/Header/Header.jsx';\nimport TodoList from './components/TodoList/TodoList.jsx';\n\nconst App = () => {\n  return(\n    <div className=\"todo\">\n      <Header />\n      <TodoList />\n    </div>\n  );\n};\n\nrender(<App />, document.querySelector('.layout'));\n\nserviceWorker.register();"],"sourceRoot":""}